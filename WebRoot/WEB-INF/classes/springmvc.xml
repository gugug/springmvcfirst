<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"               
xmlns:p="http://www.springframework.org/schema/p"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
xsi:schemaLocation="
  http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
  http://www.springframework.org/schema/util
  http://www.springframework.org/schema/util/spring-util-4.1.xsd
  http://www.springframework.org/schema/context 
  http://www.springframework.org/schema/context/spring-context-4.1.xsd
  http://www.springframework.org/schema/mvc
  http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
  
  <!-- 配置handler -->
  <bean id="itemsController1" name="/queryItems_test.action" class="cn.ssm.controller.ItemsController1" />
  <!-- 配置另外一个Handler -->
  <bean id="itemsController2" class="cn.ssm.controller.ItemsController2" />
  
  <!-- 对于注解的Handler可以单个配置 
  不同配置id ，因为映射已经在Handler类中配置了	@RequestMapping("/queryItems")
 在实际开发中建议使用组件扫描
  -->
<!--   <bean class="cn.ssm.controller.ItemsController3" /> -->
 
 <!-- 可以扫描controller、service、。。。
  这里让扫描controller
   -->
  <context:component-scan base-package="cn.ssm.controller"></context:component-scan>
  
  <!-- 静态资源的解析
  包括：js、css、img...
  
   -->
   <mvc:resources mapping="/public/**" location="/public/" />
   <mvc:resources mapping="/htmlpages/**" location="/WEB-INF/htmlpages/" />
 
  
  
  
  <!-- 处理器映射器 
  把beanName当成URL进行查找，需要配置handler时指定beanname(就是url)
  所有的映射器都实现了HandlerMapping接口
  -->
  <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
    
    <!-- 简单url映射器 -->
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    	<property name="mappings">
    		<props>
    		<!-- 对itemsController1进行URL映射，对应于（controller的bean id），url是 /queryItems1.action-->
    			<prop key="/queryItems1.action">itemsController1</prop>
    			<prop key="/queryItems2.action">itemsController1</prop>
    		    <prop key="/queryItems3.action">itemsController2</prop>
    		
    		</props>
    	</property>
    </bean>
    
    <!-- 注解映射器 -->
    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean> -->
    <!-- 注解适配器 -->
   <!-- 	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean> -->
    
    <!-- 使用mmvc:annotation-driven可以代替上边的注解映射器和注解适配器
    mvc:annotation-driven默认加载很多参数绑定的方法，比如json转换解析器就默认加载了
             如果使用mvc:annotation-driven就不要配置org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping和org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
   实际开发使用mvc:annotation-driven
     -->
     
   <!--避免ajax请求出现406错误-->
<!-- <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
       <property name="favorPathExtension" value="false"/>
       <property name="favorParameter" value="false"/>
       <property name="ignoreAcceptHeader" value="false"/>
       <property name="mediaTypes">
              <value>
                     atom = application/atom+xml
                     html = text/html
                     json = application/json
                     * = */*
              </value>
       </property>
</bean> -->


    <mvc:annotation-driven validator="validator"/>
    
    
  <!-- 处理器适配器 
      	所有的的处理器适配器都是实现HandlerAdapater
  -->
  <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>
  
  <!-- 另一个非注解的适配器 -->
  <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>
  
  <!-- 视图解析器
 解析jsp，默认使用jstl标签，classpath下的有jstl的包
   -->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
  		<!-- 配置前缀 -->
  		<property name="prefix" value="/WEB-INF/jsp/" />
  		<!-- 配置后缀 -->
  		<property name="suffix" value=".jsp" />
  </bean>
  
      <!-- 支持上传文件 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>  
  

 
    <!--校验器 -->
	<bean id="validator"
       class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" >

        <!--hibernate校验器-->
       <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>

 		 <!--指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
       <property name="validationMessageSource" ref="messageSource" />
    </bean>

 <!--校验错误信息配置文件-->
    <bean id="messageSource"
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">

        <!--资源文件名-->
       <property name="basenames">  
        <list>   
            <value>classpath:CustomValidationMessages</value>
        </list>  
        </property>

       <!--资源文件编码格式 -->
       <property name="fileEncodings" value="utf-8" />
       <!-- 对资源文件内容缓存时间，单位秒 -->
       <property name="cacheSeconds" value="120" />
    </bean>
 
 <!-- 全局异常处理器
 只要handler实现了HandlerExceptionResolver接口就是全局异常处理
  -->
 <bean class="cn.ssm.exception.CustomExceptionResolver"></bean>
 
 
 <!-- 拦截器 -->
 <mvc:interceptors>
 	<!-- 多个拦截器，顺序执行 -->
 	<!-- 登录认证拦截器 -->
 	<mvc:interceptor>
 		<!-- /**表示所有的url包括子url路径 -->
 		<mvc:mapping path="/**"/>
 		<bean class="cn.ssm.interceptor.LoginInterceptor"></bean>
 	</mvc:interceptor>
 	
 	<mvc:interceptor>
 		<!-- /**表示所有的url包括子url路径 -->
 		<mvc:mapping path="/**"/>
 		<bean class="cn.ssm.interceptor.HandlerInterceptor1"></bean>
 	</mvc:interceptor>
 	
  	<mvc:interceptor>
 		<mvc:mapping path="/**"/>
 		<bean class="cn.ssm.interceptor.HandlerInterceptor2"></bean>
 	</mvc:interceptor>
 
 </mvc:interceptors>
 
 
</beans>